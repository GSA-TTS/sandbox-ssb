# On pull request events, this workflow will run `terraform init`, `terraform
# fmt`, and `terraform plan`. On push events to the master branch, `terraform
# apply` will be executed.

name: 'Terraform'

on:
  push:
    branches:
    - '**'
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    env:
      # For storing the Terraform state for the deployment
      AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      # For deploying and registering the broker in Cloud Foundry
      TF_VAR_cf_username: "${{ secrets.TF_VAR_cf_username }}"
      TF_VAR_cf_password: "${{ secrets.TF_VAR_cf_password }}"      
      # For managing brokered resources via the AWS brokerpak
      TF_VAR_aws_access_key_id: "${{ secrets.TF_VAR_aws_access_key_id }}"
      TF_VAR_aws_secret_access_key: "${{ secrets.TF_VAR_aws_access_key_id }}"
      # For managing brokered resources via the GCP brokerpak
      TF_VAR_gcp_credentials: "${{ secrets.TF_VAR_gcp_credentials }}"
      TF_VAR_gcp_project: "${{ secrets.TF_VAR_gcp_project }}"
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Download broker and the AWS and GCP brokerpaks
      run: |
        (cd app && curl -L -O https://github.com/pivotal/cloud-service-broker/releases/download/sb-0.1.0-rc.34-aws-0.0.1-rc.108/cloud-service-broker)
        (cd app && curl -L -O https://github.com/pivotal/cloud-service-broker/releases/download/sb-0.1.0-rc.34-aws-0.0.1-rc.108/aws-services-0.0.1-rc.108.brokerpak)
        (cd app && curl -L -O https://github.com/pivotal/cloud-service-broker/releases/download/sb-0.1.0-rc.34-gcp-0.0.1-rc.73/google-services-0.0.1-rc.73.brokerpak)
    # Install the latest version of the Terraform provider for Cloud Foundry (https://github.com/cloudfoundry-community/terraform-provider-cf/wiki)
    - name: Install the Cloud Foundry Terraform provider
      run: bash -c "$(curl -fsSL https://raw.github.com/cloudfoundry-community/terraform-provider-cf/master/bin/install.sh)"
    # Supply a (empty) .env.secrets file
    - name: Supply .env.secrets
      run: touch .env.secrets
    # Initialize the Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      env:
        BUCKET: "${{ secrets.BUCKET }}"
        KEY: "ssb-tfstate"
        REGION: "us-gov-west-1"
        ENCRYPT: "true"
      # run: cat > backend.tfvars << EOT
      #   ${{ env.BACKEND_TFVARS }}
      # EOT
      run: > 
        docker-compose run --rm terraform init 
        -backend-config=bucket="${{ env.BUCKET }}" 
        -backend-config=key="${{ env.KEY }}" 
        -backend-config=region="${{ env.REGION }}" 
        -backend-config=encrypt="${{ env.ENCRYPT }}"
        -backend-config=access_key="${{ secrets.AWS_ACCESS_KEY_ID }}"
        -backend-config=secret_key="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      # -backend-config=backend.tfvars

    # Check that all Terraform configuration files adhere to the canonical format
    - name: Terraform Format
      run: docker-compose run --rm terraform fmt -check

    # Generate an execution plan for Terraform
    - name: Terraform Plan
      run: docker-compose run --rm terraform plan -out=tfplan

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: docker-compose run --rm terraform apply tfplan
